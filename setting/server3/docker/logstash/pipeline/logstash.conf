input {
  kafka {
    topics => ["seoul_api"]
    topics_pattern => "seoul_api"
    bootstrap_servers => "kafka:29092"
    codec => "json"
  }
}

filter {
  mutate {
    add_field => {
      "AREA_NM" => "%{[CITYDATA][AREA_NM]}"
      "AREA_PPLTN_MIN" => "%{[CITYDATA][LIVE_PPLTN_STTS][0][AREA_PPLTN_MIN]}"
      "AREA_PPLTN_MAX" => "%{[CITYDATA][LIVE_PPLTN_STTS][0][AREA_PPLTN_MAX]}"
      "MALE_PPLTN_RATE" => "%{[CITYDATA][LIVE_PPLTN_STTS][0][MALE_PPLTN_RATE]}"
      "FEMALE_PPLTN_RATE" => "%{[CITYDATA][LIVE_PPLTN_STTS][0][FEMALE_PPLTN_RATE]}"
      "PPLTN_RATE_10" => "%{[CITYDATA][LIVE_PPLTN_STTS][0][PPLTN_RATE_10]}"
      "PPLTN_RATE_20" => "%{[CITYDATA][LIVE_PPLTN_STTS][0][PPLTN_RATE_20]}"
      "PPLTN_RATE_30" => "%{[CITYDATA][LIVE_PPLTN_STTS][0][PPLTN_RATE_30]}"
      "PPLTN_TIME" => "%{[CITYDATA][LIVE_PPLTN_STTS][0][PPLTN_TIME]}"

      "ROAD_TRAFFIC_IDX" => "%{[CITYDATA][ROAD_TRAFFIC_STTS][AVG_ROAD_DATA][ROAD_TRAFFIC_IDX]}"
      "ROAD_TRAFFIC_TIME" => "%{[CITYDATA][ROAD_TRAFFIC_STTS][AVG_ROAD_DATA][ROAD_TRFFIC_TIME]}"

      "SENSIBLE_TEMP" => "%{[CITYDATA][WEATHER_STTS][0][SENSIBLE_TEMP]}"
      "PRECIPITATION" => "%{[CITYDATA][WEATHER_STTS][0][PRECIPITATION]}"
      "PRECPT_TYPE" => "%{[CITYDATA][WEATHER_STTS][0][PRECPT_TYPE]}"
      "PCP_MSG" => "%{[CITYDATA][WEATHER_STTS][0][PCP_MSG]}"
      "PM25" => "%{[CITYDATA][WEATHER_STTS][0][PM25]}"
      "PM10" => "%{[CITYDATA][WEATHER_STTS][0][PM10]}"
      "AIR_IDX" => "%{[CITYDATA][WEATHER_STTS][0][AIR_IDX]}"
      "WEATHER_TIME" => "%{[CITYDATA][WEATHER_STTS][0][WEATHER_TIME]}"

      "FCST_PPLTN_MIN_1h" => "%{[CITYDATA][LIVE_PPLTN_STTS][0][FCST_PPLTN][0][FCST_PPLTN_MIN]}"
      "FCST_PPLTN_MAX_1h" => "%{[CITYDATA][LIVE_PPLTN_STTS][0][FCST_PPLTN][0][FCST_PPLTN_MAX]}"
      "FCST_PPLTN_MIN_2h" => "%{[CITYDATA][LIVE_PPLTN_STTS][0][FCST_PPLTN][1][FCST_PPLTN_MIN]}"
      "FCST_PPLTN_MAX_2h" => "%{[CITYDATA][LIVE_PPLTN_STTS][0][FCST_PPLTN][1][FCST_PPLTN_MAX]}"
      "FCST_PPLTN_MIN_3h" => "%{[CITYDATA][LIVE_PPLTN_STTS][0][FCST_PPLTN][2][FCST_PPLTN_MIN]}"
      "FCST_PPLTN_MAX_3h" => "%{[CITYDATA][LIVE_PPLTN_STTS][0][FCST_PPLTN][2][FCST_PPLTN_MAX]}"

      "RAIN_CHANCE_1h" => "%{[CITYDATA][WEATHER_STTS][0][FCST24HOURS][0][RAIN_CHANCE]}"
      "RAIN_CHANCE_2h" => "%{[CITYDATA][WEATHER_STTS][0][FCST24HOURS][1][RAIN_CHANCE]}"
      "RAIN_CHANCE_3h" => "%{[CITYDATA][WEATHER_STTS][0][FCST24HOURS][2][RAIN_CHANCE]}"
    }
  }

  # PRK_STTS에는 리스트로 묶여진 가변적 길이의 딕셔너리 데이터가 있다.
  # 길이만큼 각각의 딕셔너리에 있는 CPCTY의 합을 구해서
  # total_cpcty를 명명하고 우리가 구한 CPCTY에 대한 총합을 value로 정의한다.
  # total_cpcty 필드는 정수형 타입을 가진다.
  ruby {
          code => '
            prk_stts = event.get("[CITYDATA][PRK_STTS]")
            if prk_stts.is_a?(Array)
              total_cpcty = 0
              prk_stts.each_with_index do |parking, index|
                cpcty = parking["CPCTY"].to_i # to_i가 정수로 변환한다 라는 뜻
                total_cpcty += cpcty
              end
              event.set("total_cpcty", total_cpcty) # 만약에 prk_stts의 값 즉 리스트의 길이가 0이면 total_cpcty는 0으로...
            end
          '
  }
  #
  #
  #
  #


  mutate {
    remove_field => [ "[CITYDATA]", "[list_total_count]", "[RESULT]" ]
  }

  mutate {
    gsub => [ "PRECIPITATION", "-", "0" ]
  }

  mutate {
    convert => {
      "AREA_PPLTN_MIN" => "integer"
      "AREA_PPLTN_MAX" => "integer"
      "MALE_PPLTN_RATE" => "float"
      "FEMALE_PPLTN_RATE" => "float"
      "PPLTN_RATE_10" => "float"
      "PPLTN_RATE_20" => "float"
      "PPLTN_RATE_30" => "float"

      "SENSIBLE_TEMP" => "float"
      "PRECIPITATION" => "float"
      "PM25" => "integer"
      "PM10" => "integer"

      "FCST_PPLTN_MIN_1h" => "integer"
      "FCST_PPLTN_MAX_1h" => "integer"
      "FCST_PPLTN_MIN_2h" => "integer"
      "FCST_PPLTN_MAX_2h" => "integer"
      "FCST_PPLTN_MIN_3h" => "integer"
      "FCST_PPLTN_MAX_3h" => "integer"

      "RAIN_CHANCE_1h" => "integer"
      "RAIN_CHANCE_2h" => "integer"
      "RAIN_CHANCE_3h" => "integer"
    }
  }

  date {
    match => ["PPLTN_TIME", "YYYY-MM-dd HH:mm"]
    target => "PPLTN_TIME"
  }
  date {
    match => ["ROAD_TRAFFIC_TIME", "YYYY-MM-dd HH:mm"]
    target => "ROAD_TRAFFIC_TIME"
  }
  date {
    match => ["WEATHER_TIME", "YYYY-MM-dd HH:mm"]
    target => "WEATHER_TIME"
  }
}

output {
  if "한강" in [AREA_NM] {

    stdout { codec => rubydebug }

    elasticsearch {
      hosts => "http://elasticsearch:9200"
      index => "seoul_river_data"
    }
  }
}